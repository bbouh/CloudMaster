version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: cloudmaster-postgres
    environment:
      POSTGRES_DB: cloudmaster
      POSTGRES_USER: cloudmaster
      POSTGRES_PASSWORD: cloudmaster123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - cloudmaster-network

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: cloudmaster-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - cloudmaster-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: cloudmaster-backend
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://cloudmaster:cloudmaster123@postgres:5432/cloudmaster
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_REFRESH_SECRET: your-super-secret-refresh-key-change-in-production
      GOOGLE_CLIENT_ID: your-google-client-id
      GOOGLE_CLIENT_SECRET: your-google-client-secret
      GITHUB_CLIENT_ID: your-github-client-id
      GITHUB_CLIENT_SECRET: your-github-client-secret
      STRIPE_SECRET_KEY: your-stripe-secret-key
      STRIPE_WEBHOOK_SECRET: your-stripe-webhook-secret
    ports:
      - "3001:3001"
    depends_on:
      - postgres
      - redis
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - cloudmaster-network

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: cloudmaster-frontend
    environment:
      REACT_APP_API_URL: http://localhost:3001
      REACT_APP_STRIPE_PUBLISHABLE_KEY: your-stripe-publishable-key
    ports:
      - "3000:3000"
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - cloudmaster-network

  # Nginx reverse proxy (for production)
  nginx:
    image: nginx:alpine
    container_name: cloudmaster-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - cloudmaster-network
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:

networks:
  cloudmaster-network:
    driver: bridge
